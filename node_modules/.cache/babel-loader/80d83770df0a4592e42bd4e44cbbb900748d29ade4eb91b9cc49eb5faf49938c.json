{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\incre\\\\OneDrive\\\\Documents\\\\Full Stack Project\\\\full-stack-project-frontend\\\\src\\\\components\\\\containers\\\\CampusContainer.js\";\n/*==================================================\r\nCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchCampusThunk, deleteCampusThunk, editStudentThunk } from \"../../store/thunks\";\nimport { CampusView } from \"../views\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass CampusContainer extends Component {\n  // Get the specific campus data from back-end database\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    console.log(this.props.match.params.id);\n    this.props.fetchCampus(this.props.match.params.id);\n  }\n\n  // Render a Campus view by passing campus data as props to the corresponding View component\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CampusView, {\n        campus: this.props.campus,\n        students: this.props.campus.students,\n        editStudent: this.props.editStudent,\n        deleteCampus: this.props.deleteCampus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\nconst mapState = state => {\n  return {\n    campus: state.campus,\n    // Get the State object from Reducer \"campus\"\n    students: state.campus.students\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = dispatch => {\n  return {\n    fetchCampus: id => dispatch(fetchCampusThunk(id)),\n    deleteCampus: id => dispatch(deleteCampusThunk(id)),\n    editStudent: student => dispatch(editStudentThunk(student))\n  };\n};\n\n// Export store-connected container by default\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(CampusContainer);","map":{"version":3,"names":["Header","React","Component","connect","fetchCampusThunk","deleteCampusThunk","editStudentThunk","CampusView","jsxDEV","_jsxDEV","CampusContainer","componentDidMount","console","log","props","match","params","id","fetchCampus","render","children","fileName","_jsxFileName","lineNumber","columnNumber","campus","students","editStudent","deleteCampus","mapState","state","mapDispatch","dispatch","student"],"sources":["C:/Users/incre/OneDrive/Documents/Full Stack Project/full-stack-project-frontend/src/components/containers/CampusContainer.js"],"sourcesContent":["/*==================================================\r\nCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchCampusThunk, deleteCampusThunk, editStudentThunk } from \"../../store/thunks\";\r\n\r\nimport { CampusView } from \"../views\";\r\n\r\nclass CampusContainer extends Component {\r\n  // Get the specific campus data from back-end database\r\n  componentDidMount() {\r\n    // Get campus ID from URL (API link)\r\n    console.log(this.props.match.params.id);\r\n    this.props.fetchCampus(this.props.match.params.id);\r\n  }\r\n\r\n  // Render a Campus view by passing campus data as props to the corresponding View component\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <CampusView \r\n          campus={this.props.campus} \r\n          students = {this.props.campus.students}\r\n          editStudent={this.props.editStudent} \r\n          deleteCampus = {this.props.deleteCampus}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\r\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\r\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\r\nconst mapState = (state) => {\r\n  return {\r\n    campus: state.campus,  // Get the State object from Reducer \"campus\"\r\n    students: state.campus.students\r\n  };\r\n};\r\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\r\n    deleteCampus: (id) => dispatch(deleteCampusThunk(id)),\r\n    editStudent: (student) => dispatch(editStudentThunk(student)),\r\n  };\r\n};\r\n\r\n// Export store-connected container by default\r\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(mapState, mapDispatch)(CampusContainer);"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,gBAAgB,EAAEC,iBAAiB,EAAEC,gBAAgB,QAAQ,oBAAoB;AAE1F,SAASC,UAAU,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,eAAe,SAASR,SAAS,CAAC;EACtC;EACAS,iBAAiBA,CAAA,EAAG;IAClB;IACAC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,KAAK,CAACC,KAAK,CAACC,MAAM,CAACC,EAAE,CAAC;IACvC,IAAI,CAACH,KAAK,CAACI,WAAW,CAAC,IAAI,CAACJ,KAAK,CAACC,KAAK,CAACC,MAAM,CAACC,EAAE,CAAC;EACpD;;EAEA;EACAE,MAAMA,CAAA,EAAG;IACP,oBACEV,OAAA;MAAAW,QAAA,gBACEX,OAAA,CAACT,MAAM;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACVf,OAAA,CAACF,UAAU;QACTkB,MAAM,EAAE,IAAI,CAACX,KAAK,CAACW,MAAO;QAC1BC,QAAQ,EAAI,IAAI,CAACZ,KAAK,CAACW,MAAM,CAACC,QAAS;QACvCC,WAAW,EAAE,IAAI,CAACb,KAAK,CAACa,WAAY;QACpCC,YAAY,EAAI,IAAI,CAACd,KAAK,CAACc;MAAa;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAEV;AACF;;AAEA;AACA;AACA;AACA,MAAMK,QAAQ,GAAIC,KAAK,IAAK;EAC1B,OAAO;IACLL,MAAM,EAAEK,KAAK,CAACL,MAAM;IAAG;IACvBC,QAAQ,EAAEI,KAAK,CAACL,MAAM,CAACC;EACzB,CAAC;AACH,CAAC;AACD;AACA;AACA,MAAMK,WAAW,GAAIC,QAAQ,IAAK;EAChC,OAAO;IACLd,WAAW,EAAGD,EAAE,IAAKe,QAAQ,CAAC5B,gBAAgB,CAACa,EAAE,CAAC,CAAC;IACnDW,YAAY,EAAGX,EAAE,IAAKe,QAAQ,CAAC3B,iBAAiB,CAACY,EAAE,CAAC,CAAC;IACrDU,WAAW,EAAGM,OAAO,IAAKD,QAAQ,CAAC1B,gBAAgB,CAAC2B,OAAO,CAAC;EAC9D,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA,eAAe9B,OAAO,CAAC0B,QAAQ,EAAEE,WAAW,CAAC,CAACrB,eAAe,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}