{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\incre\\\\OneDrive\\\\Documents\\\\Full Stack Project\\\\full-stack-project-frontend\\\\src\\\\components\\\\containers\\\\NewStudentContainer.js\";\n/*==================================================\r\nNewStudentContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport NewStudentView from '../views/NewStudentView';\nimport { addStudentThunk, fetchAllCampusesThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n    // Capture input data when it is entered\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n    // Take action after user click the submit button\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      if (this.state.firstname === \"\" || this.state.lastname === \"\") {\n        alert(\"Missing Information\");\n        return;\n      }\n      let student = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        campusId: this.state.campusId\n      };\n      console.log(\"ADDING STUDENT\", student);\n      // Add new student in back-end database\n      let newStudent = await this.props.addStudent(student);\n\n      // Update state, and trigger redirect to show the new student\n      this.setState({\n        firstname: \"\",\n        lastname: \"\",\n        campusId: null,\n        redirect: true,\n        redirectId: newStudent.id\n      });\n    };\n    this.state = {\n      firstname: \"\",\n      lastname: \"\",\n      campusId: null,\n      redirect: false,\n      redirectId: null\n    };\n  }\n  async componentDidMount() {\n    try {\n      await this.props.fetchAllCampuses();\n      console.log(\"fetchAllCampuses completed\");\n      console.log(this.props);\n      // Update state with the campusId after allCampuses are fetched\n      if (this.props.allCampuses.length > 0) {\n        this.setState({\n          campusId: this.props.allCampuses[0].id\n        });\n      }\n    } catch (error) {\n      console.error(\"Error fetching campuses:\", error);\n    }\n  }\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/student/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 15\n      }, this);\n    }\n\n    // Display the input form via the corresponding View component\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewStudentView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit,\n        campuses: this.props.allCampuses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = dispatch => {\n  return {\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\n    addStudent: student => dispatch(addStudentThunk(student))\n  };\n};\nconst mapStateToProps = state => ({\n  allCampuses: state.allCampuses // Adjust based on your Redux state structure\n});\n\n// Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapStateToProps, mapDispatch)(NewStudentContainer);","map":{"version":3,"names":["Header","Component","connect","Redirect","NewStudentView","addStudentThunk","fetchAllCampusesThunk","jsxDEV","_jsxDEV","NewStudentContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","state","firstname","lastname","alert","student","campusId","console","log","newStudent","addStudent","redirect","redirectId","id","componentDidMount","fetchAllCampuses","allCampuses","length","error","componentWillUnmount","render","to","fileName","_jsxFileName","lineNumber","columnNumber","children","campuses","mapDispatch","dispatch","mapStateToProps"],"sources":["C:/Users/incre/OneDrive/Documents/Full Stack Project/full-stack-project-frontend/src/components/containers/NewStudentContainer.js"],"sourcesContent":["/*==================================================\r\nNewStudentContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport NewStudentView from '../views/NewStudentView';\r\nimport { addStudentThunk, fetchAllCampusesThunk } from '../../store/thunks';\r\n\r\nclass NewStudentContainer extends Component {\r\n  // Initialize state\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      firstname: \"\", \r\n      lastname: \"\", \r\n      campusId: null, \r\n      redirect: false, \r\n      redirectId: null\r\n    };\r\n  }\r\n  async componentDidMount() {\r\n    try {\r\n      await this.props.fetchAllCampuses();\r\n      console.log(\"fetchAllCampuses completed\");\r\n      console.log(this.props);\r\n      // Update state with the campusId after allCampuses are fetched\r\n      if (this.props.allCampuses.length > 0) {\r\n        this.setState({ campusId: this.props.allCampuses[0].id });\r\n      }\r\n    } catch (error) {\r\n        console.error(\"Error fetching campuses:\", error);\r\n    }\r\n  }\r\n  // Capture input data when it is entered\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  // Take action after user click the submit button\r\n  handleSubmit = async event => {\r\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\r\n\r\n    if(this.state.firstname === \"\" || this.state.lastname === \"\") {\r\n      alert(\"Missing Information\");\r\n      return;\r\n    }\r\n\r\n    let student = {\r\n        firstname: this.state.firstname,\r\n        lastname: this.state.lastname,\r\n        campusId: this.state.campusId\r\n    };\r\n    console.log(\"ADDING STUDENT\", student);\r\n    // Add new student in back-end database\r\n    let newStudent = await this.props.addStudent(student);\r\n\r\n    // Update state, and trigger redirect to show the new student\r\n    this.setState({\r\n      firstname: \"\", \r\n      lastname: \"\", \r\n      campusId: null, \r\n      redirect: true, \r\n      redirectId: newStudent.id\r\n    });\r\n  }\r\n\r\n  // Unmount when the component is being removed from the DOM:\r\n  componentWillUnmount() {\r\n      this.setState({redirect: false, redirectId: null});\r\n  }\r\n\r\n  // Render new student input form\r\n  render() {\r\n    // Redirect to new student's page after submit\r\n    if(this.state.redirect) {\r\n      return (<Redirect to={`/student/${this.state.redirectId}`}/>)\r\n    }\r\n\r\n    // Display the input form via the corresponding View component\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <NewStudentView \r\n          handleChange = {this.handleChange} \r\n          handleSubmit={this.handleSubmit}    \r\n          campuses={this.props.allCampuses} \r\n        />\r\n      </div>          \r\n    );\r\n  }\r\n}\r\n\r\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\r\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n    return({\r\n        fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\r\n        addStudent: (student) => dispatch(addStudentThunk(student)),\r\n    })\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  allCampuses: state.allCampuses, // Adjust based on your Redux state structure\r\n});\r\n\r\n// Export store-connected container by default\r\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(mapStateToProps, mapDispatch)(NewStudentContainer);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}